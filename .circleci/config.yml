defaults: &defaults
  working_directory: ~/app
  docker:
  - image: circleci/node:8

deploy_container_config: &deploy_container_config
  docker:
  - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
    environment:
      GITHUB_TEAM_NAME_SLUG: categorisation-tool

install_aws_cli: &install_aws_cli
  run:
    name: Set up aws
    command: |
      sudo apt-get --assume-yes install python3-pip
      sudo pip3 install awscli
      $(aws ecr get-login --region eu-west-1 --no-include-email)

version: 2
jobs:
  build:
    <<: *defaults
    steps:
    - checkout
    - run:
        name: Update npm
        command: 'sudo npm install -g npm@latest'
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: Install Dependencies
        command: npm ci
    - save_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
        paths:
        - node_modules
    - run:
        name: Linter check
        command: npm run lint
    - run:
        command: |
          npm run build
          DATE=$(date '+%Y-%m-%d')
          export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
          export GIT_REF="$CIRCLE_SHA1"
          npm run record-build-info
    - persist_to_workspace:
        root: .
        paths:
        - node_modules
        - build-info.json
        - assets/stylesheets
  test:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: unit tests
        command: npm run test
    - store_test_results:
        path: ./reports

  copy_image_to_ecs:
    <<: *defaults
    docker:
      - image: circleci/node:8.11.1-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker
      - *install_aws_cli
      - run:
          name: publish image to ecs
          command: |
            VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            BUILD_VERSION=${VERSION}

            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker pull mojdigitalstudio/categorisation-tool:$BUILD_VERSION

            docker tag mojdigitalstudio/categorisation-tool:$BUILD_VERSION "${ECR_ENDPOINT}/omic/categorisation-tool:${CIRCLE_SHA1}"
            docker tag "${ECR_ENDPOINT}/omic/categorisation-tool:${CIRCLE_SHA1}" "${ECR_ENDPOINT}/omic/categorisation-tool:latest"
            login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
            ${login}
            docker push "${ECR_ENDPOINT}/omic/categorisation-tool:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/omic/categorisation-tool:latest"


  build_docker:
    <<: *defaults
    docker:
    - image: circleci/node:8.11.1-browsers
    steps:
    - checkout
    - attach_workspace:
        at: ~/app
    - setup_remote_docker
    - run:
        name: Build container and publish to docker hub
        command: |
          VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
          GIT_REF=$(egrep gitRef build-info.json  | awk -F"\"" '{print $8}')
          BUILD_VERSION=${VERSION}

          docker build --rm=false . \
             --build-arg BUILD_NUMBER=$VERSION \
             --build-arg GIT_REF=$GIT_REF \
             --tag "mojdigitalstudio/categorisation-tool:$BUILD_VERSION" \
             --label "maintainer=lucy.bennett@digital.justice.gov.uk" \
             --label "build.number=$CIRCLE_BUILD_NUM" \
             --label "build.url=$CIRCLE_BUILD_URL" \
             --label "build.gitref=$GIT_REF"

          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            # publish to docker hub as the tag
           docker login -u $DOCKER_USER -p $DOCKER_PASS
           docker tag mojdigitalstudio/categorisation-tool:$BUILD_VERSION mojdigitalstudio/categorisation-tool:latest
           docker push mojdigitalstudio/categorisation-tool:$BUILD_VERSION
           docker push mojdigitalstudio/categorisation-tool:latest
          fi

  deploy_dev:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - attach_workspace:
        at: ~/app
    - run:
        name: Kubectl deployment dev setup
        command: |
          $(aws ecr get-login --region eu-west-1 --no-include-email)
          setup-kube-auth
          kubectl config use-context dev
    - deploy:
        name: Deploy to dev
        command: |
          kubectl set image -f deploy/deployment.yaml categorisation-tool=${ECR_ENDPOINT}/omic/categorisation-tool:${CIRCLE_SHA1} --local -o yaml \
          | kubectl apply -f -
          kubectl apply \
            -f ./deploy/ingress.yaml \
            -f ./deploy/service.yaml \
            -f ./deploy/deployment.yaml

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - test:
          requires:
          - build
      - build_docker:
          requires:
          - test
      - copy_image_to_ecs:
          requires:
          - build_docker
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
          - copy_image_to_ecs
          filters:
            branches:
              only: master

version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.0.2
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
  deploy_to_env:
    parameters:
      env:
        type: string
      slack_notification:
        type: boolean
        default: false
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP=offender-categorisation
            APP_VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            echo "export APP_VERSION=$APP_VERSION;export APP=$APP" >> $BASH_ENV
            sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/${APP}/Chart.yaml
            aws secretsmanager get-secret-value --secret-id ${KUBE_ENV_NAMESPACE} | jq -r .SecretString | \
            helm upgrade ${APP} ~/git/helm_deploy/${APP}/. \
              --install --wait --reset-values --timeout 5m --history-max 10 \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
      - when:
          condition: <<parameters.slack_notification>>
          steps:
            - slack/notify:
                message: "*${APP}* version:*${APP_VERSION}* deployed to << parameters.env >>"
                include_project_field: false
                include_job_number_field: false
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/node:10-buster-browsers
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.18
  kubernetes: circleci/kubernetes@0.10.1
  helm: circleci/helm@0.2.3
  slack: circleci/slack@3.4.2

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
          - node_modules
      - run:
          name: Linter check
          command: npm run lint
      - run:
          command: |
            npm run build
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
      - persist_to_workspace:
          root: .
          paths:
          - node_modules
          - build-info.json
          - assets/stylesheets
  test:
    executor: builder
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: unit tests
        command: npm run test
    - store_test_results:
        path: ./reports
  integration_tests:
    working_directory: ~/app
    docker:
      - image: circleci/openjdk:11-jdk-node-browsers
      - image: circleci/postgres:alpine-ram
        environment:
          POSTGRES_USER: form-builder
          POSTGRES_DB: form-builder
      - image: redis
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run the node app.
          command: npm start
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "integration-tests/build.gradle" }}
      - run:
          name: Run Integration Tests
          command: chmod +x gradlew && ./gradlew build
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "integration-tests/build.gradle" }}
          paths:
            - /home/circleci/.gradle/caches
      - store_artifacts:
          path: integration-tests/build/reports
          destination: integration/spock
      - store_artifacts:
          path: integration-tests/build/geb-reports
          destination: integration/geb
      - store_test_results:
          path: integration-tests/build/test-results
  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            APP_VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')

            docker build --rm=false . \
              --build-arg BUILD_NUMBER=$APP_VERSION \
              --build-arg GIT_REF=$CIRCLE_SHA1 \
              --tag "mojdigitalstudio/categorisation-tool:$APP_VERSION" \
              --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
              --label "app.version=$APP_VERSION" \
              --label "build.version=$APP_VERSION" \
              --label "build.number=$CIRCLE_BUILD_NUM" \
              --label "build.url=$CIRCLE_BUILD_URL" \
              --label "build.gitref=$CIRCLE_SHA1"

             if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
               #publish to docker hub as the tag
               docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
               docker tag mojdigitalstudio/categorisation-tool:$APP_VERSION mojdigitalstudio/categorisation-tool:latest
               docker push mojdigitalstudio/categorisation-tool:$APP_VERSION
               docker push mojdigitalstudio/categorisation-tool:latest
             fi

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"
          slack_notification: true

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
      - integration_tests:
          requires:
          - test
      - build_docker:
          requires:
            - integration_tests
          filters:
            branches:
              only: main
      - deploy_dev:
          requires:
            - build_docker
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: offender-categorisation-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: offender-categorisation-prod
          requires:
            - request-prod-approval



name: Groovy integration tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: 'Node version file for setup-node'
        required: false
        type: string
        default: '.nvmrc'

permissions:
  contents: read

jobs:
  groovy_integration_tests:
    name: Run Groovy integration tests
    runs-on: ubuntu-latest
    env:
      RP_QUEUE_ACCESS_KEY_ID: dummy
      RP_QUEUE_SECRET_ACCESS_KEY: dummy
      RP_DL_QUEUE_ACCESS_KEY_ID: dummy
      RP_DL_QUEUE_SECRET_ACCESS_KEY: dummy
      EVENT_QUEUE_ACCESS_KEY_ID: dummy
      EVENT_QUEUE_SECRET_ACCESS_KEY: dummy
      EVENT_DL_QUEUE_ACCESS_KEY_ID: dummy
      EVENT_DL_QUEUE_SECRET_ACCESS_KEY: dummy
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_DEFAULT_REGION: eu-west-2
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:15.7
        env:
          POSTGRES_USER: form-builder
          POSTGRES_DB: form-builder
          POSTGRES_PASSWORD: form-builder
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d document-management"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      localstack:
        image: localstack/localstack:3.0.0
        env:
          SERVICES: sqs
          PERSISTENCE: /tmp/localstack/data
          TMP_DIR: /private
        ports:
          - 4566:4566
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ inputs.node_version_file }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.node_version_file }}
      - name: update apt packages
        run: sudo apt-get update
      - name: set up chrome
        uses: browser-actions/setup-chrome@v1
      - name: set up chromedriver
        uses: nanasess/setup-chromedriver@v2
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm_build_artifacts
      - name: install node dependencies
        run: npm ci
      - name: Create localstack queues
        shell: bash
        run: |
          export AWS_PAGER=""
          aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name event
          aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name risk_profiler_change
          aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name event_dlq
          aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name risk_profiler_change_dlq
      - name: run the node app in the background
        run: npm start &
      - name: wait for the node app to be ready on port 3000
        run: |
          echo "waiting for node app on port 3000..."
          timeout 120 sh -c '
            until nc -z localhost 3000; do
              echo "port 3000 not ready yet. sleeping..."
              sleep 2
            done
          '
      - name: restore Gradle wrapper cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: restore Gradle build cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ hashFiles('integration-tests/build.gradle') }}
      - name: run groovy integration tests
        id: groovy-tests
        run: |
          chmod +x gradlew
          ./gradlew build
      - name: upload groovy test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: integration_test_artifacts
          path: integration-tests/build/test-results
      - name: publish groovy test report
        if: ${{ !cancelled() && github.event.repository.visibility == 'public' }}
        uses: dorny/test-reporter@v2
        with:
          artifact: integration_test_artifacts
          name: Groovy Test Report
          path: '**/*.xml'
          reporter: java-junit
          fail-on-empty: false
          fail-on-error: false
          list-suites: 'failed'
          list-tests: 'failed'
      - name: fail the action if the tests failed
        if: ${{ steps.groovy-tests.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Groovy integration tests failed')

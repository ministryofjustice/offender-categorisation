name: Groovy Integration Tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: 'Node version file for setup-node'
        required: false
        type: string
        default: '.nvmrc'

permissions:
  contents: read

jobs:
  groovy_integration_tests:
    name: Run Groovy integration tests
    runs-on: ubuntu-latest
    env:
      RP_QUEUE_ACCESS_KEY_ID: dummy
      RP_QUEUE_SECRET_ACCESS_KEY: dummy
      RP_DL_QUEUE_ACCESS_KEY_ID: dummy
      RP_DL_QUEUE_SECRET_ACCESS_KEY: dummy
      EVENT_QUEUE_ACCESS_KEY_ID: dummy
      EVENT_QUEUE_SECRET_ACCESS_KEY: dummy
      EVENT_DL_QUEUE_ACCESS_KEY_ID: dummy
      EVENT_DL_QUEUE_SECRET_ACCESS_KEY: dummy
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_DEFAULT_REGION: eu-west-2
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:15.7
        env:
          POSTGRES_USER: form-builder
          POSTGRES_DB: form-builder
          POSTGRES_PASSWORD: form-builder
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d document-management"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      localstack:
        image: localstack/localstack:3.0.0
        env:
          SERVICES: sqs
          PERSISTENCE: /tmp/localstack/data
          TMP_DIR: /private
        ports:
          - 4566:4566
    steps:
      - uses: actions/checkout@v4
      - name: update apt packages
        run: sudo apt-get udpdate
      - name: install google chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -q -O google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get install -f -y
          google-chrome --version
      - name: install chromedriver
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          echo "Detected Chrome version: $CHROME_VERSION"
          # Get corresponding chromedriver version
          CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION)
          echo "Installing Chromedriver version: $CHROMEDRIVER_VERSION"
          wget -q -O chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm_build_artifacts
      - name: Create localstack queues
        shell: bash
        run: |
          export AWS_PAGER=""
            aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name event
            aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name risk_profiler_change
            aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name event_dlq
            aws --endpoint-url=http://localhost:4566 --region eu-west-2 sqs create-queue --queue-name risk_profiler_change_dlq
      - name: run the node app in the background
        run: npm start &
      - name: wait for the node app to be ready on port 3000
        run: |
          echo "waiting for node app on port 3000..."
          until nc -z localhost 3000; do
          echo "port 3000 not ready yet. sleeping..."
          sleep 2
          done
      - name: restore Gradle wrapper cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
          key: gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: restore Gradle build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
          key: gradle-cache-${{ hashFiles('integration-tests/build.gradle') }}
      - name: run groovy integration tests
        run: |
          chmod +x gradlew
          ./gradlew build
      - name: cache gradle wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: cache gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ hashFiles('integration-tests/build.gradle') }}
      - name: upload spock reports
        uses: actions/upload-artifact@v4
        with:
          name: integration-spock-reports
          path: integration-tests/build/reports
      - name: upload geb reports
        uses: actions/upload-artifact@v4
        with:
          name: integration-geb-reports
          path: integration-tests/build/geb-reports
      - name: upload test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-tests/build/test-results
